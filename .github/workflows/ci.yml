name: CI Pipeline

on:
  push:
    branches: [ main, experimental-*, feature-*, fix-* ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.13"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mypy black ruff
    
    - name: Run Black (code formatting)
      run: black --check chirality/ tests/
    
    - name: Run Ruff (linting) 
      run: ruff check chirality/ tests/
    
    - name: Run MyPy (type checking)
      run: mypy chirality/
      continue-on-error: true  # Type checking is advisory for now

  test-architecture:
    name: Test Prompt System Architecture
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" 
        pip install pytest pytest-cov pyyaml
    
    - name: Validate prompt asset integrity
      run: |
        echo "Validating prompt asset structure..."
        python -c "
        from chirality.lib.prompt_registry import PromptRegistry
        from pathlib import Path
        import sys
        
        try:
            # Test registry loads without errors
            registry = PromptRegistry()
            registry.load()
            assets = registry.list_assets()
            
            print(f'✓ Successfully loaded {len(assets)} prompt assets')
            
            # Verify core assets exist
            required_assets = [
                'system', 'ops.multiply', 'ops.elementwise', 'ops.add',
                'lens.combined', 'station.requirements', 'station.objectives',
                'station.verification', 'station.validation', 'station.evaluation'
            ]
            
            missing = []
            for asset_id in required_assets:
                try:
                    registry.get(asset_id)
                except KeyError:
                    missing.append(asset_id)
            
            if missing:
                print(f'✗ Missing required assets: {missing}')
                sys.exit(1)
            else:
                print('✓ All required assets present')
                
        except Exception as e:
            print(f'✗ Prompt asset validation failed: {e}')
            sys.exit(1)
        "
    
    - name: Test prompt system strategies
      run: pytest tests/lib/test_strategies.py -v
    
    - name: Test prompt system integration
      run: pytest tests/integration/test_prompt_system_integration.py -v
    
    - name: Test new resolver architecture
      run: pytest tests/core/test_cell_resolver_new.py -v
      continue-on-error: true  # May require OpenAI API key

  test-core:
    name: Test Core Framework
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov
    
    - name: Test core operations (echo resolver)
      run: pytest tests/core/test_operations.py -v
    
    - name: Test exporters
      run: pytest tests/exporters/ -v
    
    - name: Test CLI functionality
      run: pytest tests/test_cli.py -v

  test-api-compliance:
    name: Test OpenAI Responses API Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest
    
    - name: Test API compliance
      run: pytest tests/test_api_compliance.py -v
      
  validate-semantic-integrity:
    name: Validate Semantic Integrity Rules
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Validate normative spec unchanged
      run: |
        echo "Validating normative specification integrity..."
        python -c "
        from pathlib import Path
        import hashlib
        import sys
        
        # Read normative spec
        normative_path = Path('chirality/normative_spec.txt')
        if not normative_path.exists():
            print('✗ Normative specification file missing!')
            sys.exit(1)
            
        content = normative_path.read_text()
        
        # Verify it contains key semantic rules
        required_sections = [
            'The Chirality Framework',
            'semantic multiplication',
            'ontological lensing'
        ]
        
        missing = []
        for section in required_sections:
            if section.lower() not in content.lower():
                missing.append(section)
        
        if missing:
            print(f'✗ Missing required sections in normative spec: {missing}')
            sys.exit(1)
        
        print('✓ Normative specification integrity validated')
        print(f'✓ Spec contains {len(content)} characters')
        "
    
    - name: Check for prohibited Chat Completions API usage
      run: |
        echo "Checking for prohibited OpenAI Chat Completions API usage..."
        if grep -r "chat\.completions\.create" chirality/ --include="*.py"; then
          echo "✗ CRITICAL: Found prohibited Chat Completions API usage!"
          echo "✗ The Chirality Framework MUST use OpenAI Responses API exclusively"
          exit 1
        else
          echo "✓ No prohibited Chat Completions API usage found"
        fi
        
        # Verify correct Responses API usage
        if grep -r "responses\.create" chirality/ --include="*.py"; then
          echo "✓ Correct Responses API usage found"
        else
          echo "⚠ Warning: No Responses API usage found (may be expected if no LLM integration)"
        fi

  cli-smoke-test:
    name: CLI Smoke Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Test CLI info command
      run: python -m chirality.cli info
    
    - name: Test CLI compute-cell with echo resolver
      run: |
        python -m chirality.cli compute-cell C --i 0 --j 0 --resolver echo --verbose
    
    - name: Test CLI matrix operations
      run: |
        # Test different matrix types with echo resolver
        python -m chirality.cli compute-cell F --i 1 --j 2 --resolver echo
        python -m chirality.cli compute-cell D --i 2 --j 1 --resolver echo

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Run Safety (known vulnerabilities)
      run: safety check --json || true
    
    - name: Run pip-audit (dependency audit)
      run: pip-audit --format=json || true

  build-test:
    name: Build & Installation Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Test clean installation
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import chirality; print('✓ Package imports successfully')"
        python -c "from chirality.lib.strategies import PromptStrategy; print('✓ New prompt system available')"

  coverage-report:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" 
        pip install pytest pytest-cov pyyaml
    
    - name: Run tests with coverage
      run: |
        pytest \
          tests/lib/ \
          tests/integration/ \
          tests/core/test_operations.py \
          --cov=chirality \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/