name: CI Pipeline

on:
  push:
    branches: [ main, experimental-*, feature-*, fix-* ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.13"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mypy black ruff
    
    - name: Run Black (code formatting)
      run: black --check chirality/ tests/
    
    - name: Run Ruff (linting) 
      run: ruff check chirality/ tests/
    
    - name: Run MyPy (type checking)
      run: mypy chirality/
      continue-on-error: true  # Type checking is advisory for now

  test-architecture:
    name: Test Prompt System Architecture
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" 
        pip install pytest pytest-cov pyyaml
        
    
    - name: Validate prompt asset integrity
      run: |
        echo "Validating prompt asset structure..."
        python -c "
        from chirality.lib.prompt_registry import PromptRegistry
        from pathlib import Path
        import sys
        
        try:
            # Test registry loads without errors
            registry = PromptRegistry()
            registry.load()
            assets = list(registry._assets.keys())
            
            print(f'✓ Successfully loaded {len(assets)} prompt assets')
            print(f'Available assets: {sorted(assets)}')
            
            # Verify core assets exist (NEW ARCHITECTURE)
            required_assets = [
                'stage2_multiply', 'stage2_elementwise', 'combined_lens', 'lens_shift_z',
                'station_brief.requirements', 'station_brief.objectives',
                'station_brief.verification', 'station_brief.validation', 'station_brief.evaluation'
            ]
            
            missing = []
            for asset_id in required_assets:
                try:
                    registry.get(asset_id)
                except KeyError:
                    missing.append(asset_id)
            
            if missing:
                print(f'✗ Missing required assets: {missing}')
                sys.exit(1)
            else:
                print('✓ All required assets present')
                
        except Exception as e:
            print(f'✗ Prompt asset validation failed: {e}')
            sys.exit(1)
        "
    
    - name: Test combined lensing architecture
      run: pytest tests/test_combined_lensing_architecture.py -v
    
    - name: Run package verification
      run: python verify_package.py

  test-core:
    name: Test Core Framework
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-cov
    
    - name: Test core operations (echo resolver)
      run: pytest tests/core/test_operations.py -v
    
    - name: Test exporters
      run: pytest tests/exporters/ -v
    
    - name: Test CLI functionality
      run: pytest tests/test_cli.py -v

  test-api-compliance:
    name: Test OpenAI Responses API Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest
    
    - name: Test API compliance
      run: pytest tests/test_api_compliance.py -v
      

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Run Safety (known vulnerabilities)
      run: safety check --json || true
    
    - name: Run pip-audit (dependency audit)
      run: pip-audit --format=json || true

  build-test:
    name: Build & Installation Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Test clean installation
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import chirality; print('✓ Package imports successfully')"
        python -c "from chirality.lib.strategies import PromptStrategy; print('✓ New prompt system available')"
        python -c "from chirality.lib.prompt_registry import PromptRegistry; r = PromptRegistry(); r.load(); print('✓ Prompt assets load successfully')"

  coverage-report:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" 
        pip install pytest pytest-cov pyyaml
    
    - name: Run tests with coverage
      run: |
        pytest \
          tests/core/test_operations.py \
          tests/core/test_station5_validation.py \
          tests/core/test_station6_evaluation.py \
          tests/test_combined_lensing_architecture.py \
          tests/exporters/ \
          --cov=chirality \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/