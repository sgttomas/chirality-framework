# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy-to-pypi" to confirm manual deployment'
        required: true
        type: string

permissions:
  contents: read

jobs:
  check-manual-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Validate manual deployment confirmation
        run: |
          if [[ "${{ github.event.inputs.confirm_deployment }}" != "deploy-to-pypi" ]]; then
            echo "❌ Manual deployment not confirmed. Please type 'deploy-to-pypi' exactly."
            exit 1
          fi
          echo "✅ Manual deployment confirmed"
  
  release-build:
    runs-on: ubuntu-latest
    # Run for releases OR confirmed manual deployments  
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment == 'deploy-to-pypi')

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Check version sync before build
        run: |
          python scripts/check_version_sync.py
          echo "✅ Version sync verified"

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # PyPI project URL for deployment status
      url: https://pypi.org/project/chirality-framework/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
