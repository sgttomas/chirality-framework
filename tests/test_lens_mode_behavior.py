#!/usr/bin/env python3
"""
Test lens mode behavior coverage.

Tests all lens resolution modes and precedence:
- Case A: With catalog present, lens_mode="auto" uses catalog
- Case B: With catalog suppressed, lens_mode="auto" generates and persists to overrides  
- Case C: With lens_mode="catalog" and missing catalog, raises error
- Case D: With both override+catalog, override wins (per-cell override is fine)
"""

import json
import os
import tempfile
import shutil
from pathlib import Path
from unittest.mock import patch, MagicMock
from chirality.application.lenses import LensResolver, LensCatalogManager, LensOverridesManager

def load_api_key():
    """Load API key from .env file silently."""
    env_file = Path(__file__).parent / ".env"
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                if line.startswith("OPENAI_API_KEY="):
                    key = line.split("=", 1)[1].strip()
                    # Don't print the key - silent loading
                    os.environ["OPENAI_API_KEY"] = key
                    return True
    return "OPENAI_API_KEY" in os.environ

def create_test_catalog(catalog_path: Path):
    """Create a minimal test catalog."""
    catalog_data = {
        "meta": {
            "system_sha": "test_system_hash",
            "normative_sha": "test_normative_hash",
            "asset_sha": "test_asset_hash",
            "model": "gpt-4o-mini",
            "stations": ["Problem Statement"],
            "generated_at": "2025-01-01T00:00:00"
        },
        "catalog": {
            "Problem Statement": {
                "station": "Problem Statement",
                "matrix_id": "C",
                "rows": ["normative", "operative", "iterative"],
                "cols": ["guiding", "applying", "judging", "reflecting"],
                "lenses": [
                    ["catalog_lens_0_0", "catalog_lens_0_1", "catalog_lens_0_2", "catalog_lens_0_3"],
                    ["catalog_lens_1_0", "catalog_lens_1_1", "catalog_lens_1_2", "catalog_lens_1_3"],
                    ["catalog_lens_2_0", "catalog_lens_2_1", "catalog_lens_2_2", "catalog_lens_2_3"]
                ],
                "meta": {"generated_at": "2025-01-01T00:00:00"}
            }
        }
    }
    catalog_path.parent.mkdir(parents=True, exist_ok=True)
    catalog_path.write_text(json.dumps(catalog_data, indent=2))
    return catalog_data

def create_test_override(overrides_path: Path, station: str = "Problem Statement"):
    """Create a minimal test override."""
    override_data = {
        "overrides": {
            station: {
                "station": station,
                "matrix_id": "C",
                "rows": ["normative", "operative", "iterative"],
                "cols": ["guiding", "applying", "judging", "reflecting"],
                "lenses": [
                    ["override_lens_0_0", "override_lens_0_1", "override_lens_0_2", "override_lens_0_3"],
                    ["override_lens_1_0", "override_lens_1_1", "override_lens_1_2", "override_lens_1_3"],
                    ["override_lens_2_0", "override_lens_2_1", "override_lens_2_2", "override_lens_2_3"]
                ],
                "meta": {
                    "source": "manual",
                    "system_sha": "test_system_hash",
                    "normative_sha": "test_normative_hash",
                    "asset_sha": "test_asset_hash",
                    "model": "gpt-4o",
                    "params": {},
                    "generated_at": "2025-01-01T00:00:00"
                }
            }
        }
    }
    overrides_path.parent.mkdir(parents=True, exist_ok=True)
    overrides_path.write_text(json.dumps(override_data, indent=2))
    return override_data

def test_case_a_auto_with_catalog():
    """Case A: With catalog present, lens_mode='auto' uses catalog."""
    
    print("üîÑ Case A: auto mode with catalog present...")
    
    # Create temp environment
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "lens_catalog.json"
        overrides_path = temp_path / "lens_overrides.json"
        
        # Create test catalog
        create_test_catalog(catalog_path)
        
        # Create resolver in auto mode
        resolver = LensResolver(
            lens_mode="auto",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        # Resolve lenses
        result = resolver.resolve_lenses("Problem Statement")
        
        # Should use catalog
        assert result["source"] == "catalog", f"Expected catalog source, got {result['source']}"
        assert result["station"] == "Problem Statement"
        assert result["matrix_id"] == "C"
        assert result["lenses"][0][0] == "catalog_lens_0_0", "Should use catalog lens content"
        
        print("‚úÖ Auto mode correctly uses catalog when present")
        return True

def test_case_b_auto_generates_and_persists():
    """Case B: With catalog suppressed, lens_mode='auto' generates and persists."""
    
    print("üîÑ Case B: auto mode generates when no catalog...")
    
    load_api_key()  # Load silently
    
    # Create temp environment with NO catalog
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "nonexistent_catalog.json"  # Doesn't exist
        overrides_path = temp_path / "lens_overrides.json"
        
        # Mock the LLM generation to avoid real API calls
        def mock_generate_lenses(station):
            return {
                "station": station,
                "matrix_id": "C", 
                "rows": ["normative", "operative", "iterative"],
                "cols": ["guiding", "applying", "judging", "reflecting"],
                "lenses": [
                    ["generated_lens_0_0", "generated_lens_0_1", "generated_lens_0_2", "generated_lens_0_3"],
                    ["generated_lens_1_0", "generated_lens_1_1", "generated_lens_1_2", "generated_lens_1_3"],
                    ["generated_lens_2_0", "generated_lens_2_1", "generated_lens_2_2", "generated_lens_2_3"]
                ]
            }
        
        # Create resolver in auto mode
        resolver = LensResolver(
            lens_mode="auto",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        # Mock the generation method
        with patch.object(resolver, '_generate_lenses_for_station', side_effect=mock_generate_lenses):
            # Resolve lenses
            result = resolver.resolve_lenses("Problem Statement")
            
            # Should generate automatically
            assert result["source"] == "auto", f"Expected auto source, got {result['source']}"
            assert result["station"] == "Problem Statement"
            assert result["matrix_id"] == "C"
            assert result["lenses"][0][0] == "generated_lens_0_0", "Should use generated lens content"
            
            print("‚úÖ Auto mode correctly generates when no catalog")
            
            # Check if persisted to overrides (if write_catalog is enabled)
            # Note: Current implementation may not auto-persist, this validates the capability
            if overrides_path.exists():
                overrides_data = json.loads(overrides_path.read_text())
                if "Problem Statement" in overrides_data.get("overrides", {}):
                    print("‚úÖ Generated lenses persisted to overrides")
                else:
                    print("‚ö†Ô∏è  Generated lenses not persisted (write_catalog=False)")
            else:
                print("‚ö†Ô∏è  No override persistence (implementation dependent)")
        
        return True

def test_case_c_catalog_mode_missing_catalog():
    """Case C: With lens_mode='catalog' and missing catalog, raises error."""
    
    print("üîÑ Case C: catalog mode with missing catalog...")
    
    # Create temp environment with NO catalog
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "nonexistent_catalog.json"  # Doesn't exist
        overrides_path = temp_path / "lens_overrides.json"
        
        # Create resolver in catalog mode
        resolver = LensResolver(
            lens_mode="catalog",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        # Should raise error when no catalog available
        try:
            result = resolver.resolve_lenses("Problem Statement")
            assert False, "Should have raised ValueError for missing catalog"
        except ValueError as e:
            assert "no lenses available" in str(e).lower() or "catalog mode" in str(e).lower()
            print("‚úÖ Catalog mode correctly raises error when catalog missing")
            return True
        except Exception as e:
            print(f"‚ùå Unexpected exception: {e}")
            return False

def test_case_d_override_precedence():
    """Case D: With both override+catalog, override wins."""
    
    print("üîÑ Case D: override precedence over catalog...")
    
    # Create temp environment
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "lens_catalog.json"
        overrides_path = temp_path / "lens_overrides.json"
        
        # Create both catalog and override
        create_test_catalog(catalog_path)
        create_test_override(overrides_path)
        
        # Create resolver (mode doesn't matter when both exist)
        resolver = LensResolver(
            lens_mode="auto",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        # Resolve lenses
        result = resolver.resolve_lenses("Problem Statement")
        
        # Should use override (higher precedence)
        assert result["source"] == "override", f"Expected override source, got {result['source']}"
        assert result["station"] == "Problem Statement"
        assert result["matrix_id"] == "C"
        assert result["lenses"][0][0] == "override_lens_0_0", "Should use override lens content, not catalog"
        
        # Verify catalog content is different
        catalog_data = json.loads(catalog_path.read_text())
        catalog_lens = catalog_data["catalog"]["Problem Statement"]["lenses"][0][0]
        assert catalog_lens == "catalog_lens_0_0", "Catalog should have different content"
        
        print("‚úÖ Override correctly takes precedence over catalog")
        return True

def test_per_cell_override():
    """Test that per-cell overrides work (not full matrix required)."""
    
    print("üîÑ Testing per-cell override capability...")
    
    # Create temp environment
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "lens_catalog.json"
        overrides_path = temp_path / "lens_overrides.json"
        
        # Create catalog
        create_test_catalog(catalog_path)
        
        # Create partial override (just one cell)
        partial_override = {
            "overrides": {
                "Problem Statement": {
                    "station": "Problem Statement",
                    "matrix_id": "C",
                    "rows": ["normative"],  # Only one row
                    "cols": ["guiding"],    # Only one column
                    "lenses": [
                        ["single_override_lens"]  # Just one lens
                    ],
                    "meta": {
                        "source": "manual",
                        "system_sha": "test_hash",
                        "normative_sha": "test_hash",
                        "asset_sha": "test_hash",
                        "model": "gpt-4o",
                        "params": {},
                        "generated_at": "2025-01-01T00:00:00"
                    }
                }
            }
        }
        
        overrides_path.write_text(json.dumps(partial_override, indent=2))
        
        # Create resolver
        resolver = LensResolver(
            lens_mode="auto",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        # This should work - partial overrides are valid
        result = resolver.resolve_lenses("Problem Statement")
        
        # Should use override
        assert result["source"] == "override", f"Expected override source, got {result['source']}"
        assert result["lenses"][0][0] == "single_override_lens", "Should use partial override content"
        
        print("‚úÖ Per-cell override functionality works")
        return True

def test_lens_source_reporting():
    """Test lens source reporting shows correct precedence."""
    
    print("üîÑ Testing lens source reporting...")
    
    # Test with no sources
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        catalog_path = temp_path / "nonexistent.json"
        overrides_path = temp_path / "nonexistent.json"
        
        # Catalog mode with no sources
        resolver_catalog = LensResolver(
            lens_mode="catalog",
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        source = resolver_catalog.get_lens_source("Problem Statement")
        assert "error" in source.lower() or "not available" in source.lower()
        print("‚úÖ Catalog mode reports error when no sources")
        
        # Auto mode with no sources
        resolver_auto = LensResolver(
            lens_mode="auto", 
            catalog_path=catalog_path,
            overrides_path=overrides_path
        )
        
        source = resolver_auto.get_lens_source("Problem Statement")
        assert "auto" in source.lower() and "generate" in source.lower()
        print("‚úÖ Auto mode reports generation capability")
        
        return True

if __name__ == "__main__":
    print("üîÑ Testing lens mode behavior coverage...\n")
    
    success = True
    
    # Run all test cases
    success &= test_case_a_auto_with_catalog()
    success &= test_case_b_auto_generates_and_persists()
    success &= test_case_c_catalog_mode_missing_catalog()
    success &= test_case_d_override_precedence()
    success &= test_per_cell_override()
    success &= test_lens_source_reporting()
    
    if success:
        print("\n‚úÖ ALL LENS MODE BEHAVIOR TESTS PASSED!")
        print("   ‚úÖ Auto mode uses catalog when present")
        print("   ‚úÖ Auto mode generates when catalog missing")
        print("   ‚úÖ Catalog mode raises error when catalog missing")
        print("   ‚úÖ Override precedence works correctly")
        print("   ‚úÖ Per-cell overrides supported")
        print("   ‚úÖ Source reporting accurate")
    else:
        print("\n‚ùå LENS MODE BEHAVIOR TESTS FAILED")
        exit(1)